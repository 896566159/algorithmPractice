三种存图方式：
①邻接矩阵
    采用二维矩阵来表示图
    适用于边数量较多（稠密图：当边数量接近点数量的平方，即 m ≈ n^2 时，可以定义为稠密图）

// 邻接矩阵数组：w[i][j] = c 表示从 i 到 j 有权重为 c 的边
int[][] w = new int[][];
// 加边操作
void add(int i, int j, int c) {
    w[i][j] = c;
}

②邻接表（又叫做链式前向星存图）
与数组存储单链表的实现一致（头插法）
适用于边数比较少的图（稀疏图，当边数接近定点数量，即 m ≈ n 时，可定义为稀疏图）

// 存储是某个节点所对应的边的集合（链表）的头结点；
int[] he = new int[n];
// 由于访问某一条边指向的节点
int[] e = new int[m];
// 由于是以链表的形式进行存边，该数组就是用于找到下一条边
int[] ne = new int[m];
// 用于记录某条边的权重为多少
int[] w = new int[m];
// 首先 idx 是用来对边进行编号
int idx;

void add(int i, int j, int c) {
	e[idx] = b;
	ne[idx] = he[a];
	he[a] = idx;
	w[idx] = c;
	idx++;
}

// 因此当我们想要遍历所有由 a 点发出的边时，可以使用如下方式
for (int i = he[a]; i != -1; i = ne[i]) {
	// 存在由 a 指向 b 的边，权重为 c
	int b = e[i];
	int c = w[i];
}


③类
这是一种最简单，但是相比上述两种存图方式，使用得较少的存图方式。
只有当我们需要确保某个操作复杂度严格为 O(m) 时，才会考虑使用。
具体的，我们建立一个类来记录有向边信息：

class Edge {
    // 代表从 a 到 b 有一条权重为 c 的边
    int a；
	int b；
	int	c;
    Edge(int _a, int _b, int _c) {
        a = _a; b = _b; c = _c;
    }
}

通常我们会使用 List 存起所有的边对象，并在需要遍历所有边的时候，进行遍历：
List<Edge> es = new ArrayList<>();
...
for (Edge e : es) {
    ...
}
