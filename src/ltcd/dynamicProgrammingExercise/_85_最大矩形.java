package ltcd.dynamicProgrammingExercise;

import java.util.HashSet;
import java.util.Set;

public class _85_最大矩形 {



    public static void main(String[] args) {
        _85_最大矩形 v = new _85_最大矩形();
//        System.out.println(v.maximalRectangle(new char[][]{{'1', '0'}}));
//        System.out.println(v.maximalRectangle(new char[][]{{'1'}}));
        System.out.println(v.maximalRectangle(new char[][]{{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1'},{'1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','0','1','1','0','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','0','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','1','1','1'},{'0','1','1','0','1','1','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','0','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','0','0','1','1','0','1','1','0','1','0','1','0','1'},{'1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','0','1','0','1','1','0','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','1'},{'1','1','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','0','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','0','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1'},{'1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','1','1','1','0','0','1','1','1','1','1'},{'1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'},{'1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','0','1','1','0','1','1'},{'1','1','0','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','0','1','1','1','0','0','1','1','1','1','1','1','1','1'},{'1','1','1','0','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','0','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},{'1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','0','1','1','1','1','1','1','1','1','1','0','1','1','1','0','1'},{'1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','0','1','1','1','0','1','1','0','1','1'},{'1','1','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'1','1','0','0','0','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','0','1','0','1','0','1','1','0','1','1','1','1','1','1','1','1'},{'1','0','1','1','0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1'},{'1','0','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1'},{'0','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1','0','1','1','1','1','1','1','1','1','1','1'},{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','0','1','1','1','1','0','1','1','1','1','1','1','0','1','0','1','1','0','0','1','1','1','1','0','1','1'},{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','0'},{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0','0','1','1','1','1'},{'1','1','0','1','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','0','1','1','1','0','1','0','1','0','0'},{'0','1','1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','0','0','1','0','1','1','1','1','1','0','1','1','1','0','1','1','0','1','1','1','0','1'}}));
//        System.out.println(v.maximalRectangle(new char[][]{{'1', '0', '1', '0', '0'}, {'1', '0', '1', '1', '1'}, {'1', '1', '1', '1', '1'}}));
//        System.out.println(v.maximalRectangle(new char[][]{
//                {'1','1','1','1','1','1','1','1'},
//                {'1','1','1','1','1','1','1','0'},
//                {'1','1','1','1','1','1','1','0'},
//                {'1','1','1','1','1','0','0','0'},
//                {'0','1','1','1','1','0','0','0'}
//        }));

//        System.out.println(v.maximalRectangle(new char[][]{
//                {'1', '0', '1', '1', '0', '1'},
//                {'1', '1', '1', '1', '1', '1'},
//                {'0', '1', '1', '0', '1', '1'},
//                {'1', '1', '1', '0', '1', '0'},
//                {'0', '1', '1', '1', '1', '1'},
//                {'1', '1', '0', '1', '1', '1'}
//        }));
    }

    int maxMatrix = 0;
    public int maximalRectangle1(char[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int m = matrix.length;
        int n = matrix[0].length;
        memo = new HashSet<>();
        dfs1(matrix, 0, n - 1, 0, m - 1);

        return maxMatrix;
    }

    private int dfs1(char[][] matrix, int left, int right, int top, int bottom) {
        if (left > right || top > bottom || left < 0 || right >= matrix[0].length || bottom >= matrix.length || top < 0) {
            return -1;
        }

        

        return -1;
    }


    // 下面的解法错误，调换递归中的上下左右的次序可以得到不同的答案
    int max = 0;
    Set<String> memo;
    public int maximalRectangle(char[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int m = matrix.length;
        int n = matrix[0].length;
        memo = new HashSet<>();
        dfs(matrix, 0, n - 1, 0, m - 1);

        return max;
    }

    // 下面的解法错误，调换递归中的上下左右的次序可以得到不同的答案
    private void dfs(char[][] matrix, int left, int right, int top, int bottom) {
        if (left > right || top > bottom || left < 0 || right >= matrix[0].length || bottom >= matrix.length || top < 0) {
            return;
        }

        if (memo.contains(left + ""  + right + top + bottom)) {
            return;
        } else {
            memo.add(left + ""  + right + top + bottom);
        }

        int tmpMax = (right - left + 1) * (bottom - top + 1);
        int tmpLeft = left;
        int tmpRight = right;
        int tmpTop = top;
        int tmpBottom = bottom;
        boolean flag = true;
        if (tmpMax < max) {
            return;
        }

        if (tmpMax == 1) {
            if (matrix[top][left] == '1') {
                max = Math.max(tmpMax, max);
            }
            return;
        }



        while (tmpLeft <= tmpRight && tmpTop <= tmpBottom) {

            // 扫描 最下面一行
            for (int i = tmpLeft; i <= tmpRight; i++) {
                if (matrix[tmpBottom][i] == '0') {
                    flag = false;
                    // 缩小列
                    if (!memo.contains((i + 1) + "" + tmpRight + tmpTop + tmpBottom)) {
                        dfs(matrix, i + 1, tmpRight, tmpTop, tmpBottom);
                    }
                    if (!memo.contains(tmpLeft + "" + (i - 1) + tmpTop + tmpBottom)) {
                        dfs(matrix, tmpLeft, i - 1, tmpTop, tmpBottom);
                    }
                    // 缩小行
                    if (!memo.contains(tmpLeft + "" + tmpRight + tmpTop + (tmpBottom - 1))) {
                        dfs(matrix, tmpLeft, tmpRight, tmpTop, tmpBottom - 1);
                    }
                    break;
                }
            }

            // 扫描 最右边一列
            for (int i = tmpTop; i <= tmpBottom; i++) {
                if (matrix[i][tmpRight] == '0') {
                    flag = false;
                    // 缩小列
                    if (!memo.contains(tmpLeft + "" + (tmpRight - 1) + tmpTop + (tmpBottom - 1))) {
                        dfs(matrix, tmpLeft, tmpRight - 1, tmpTop, tmpBottom);
                    }
                    // 缩小行
                    if (!memo.contains(tmpLeft + "" + tmpRight + (i + 1) + tmpBottom)) {
                        dfs(matrix, tmpLeft, tmpRight, i + 1, tmpBottom);
                    }
                    if (!memo.contains(tmpLeft + "" + tmpRight + tmpTop + (i - 1))) {
                        dfs(matrix, tmpLeft, tmpRight, tmpTop, i - 1);
                    }
                    break;
                }
            }

            // 扫描 最左边一列
            for (int i = tmpTop; i <= tmpBottom; i++) {
                if (matrix[i][tmpLeft] == '0') {
                    flag = false;
                    // 缩小列
                    if (!memo.contains((tmpLeft + 1) + "" + tmpRight + tmpTop + tmpBottom)) {
                        dfs(matrix, tmpLeft + 1, tmpRight, tmpTop, tmpBottom);
                    }

                    // 缩小行
                    if (!memo.contains(tmpLeft + "" + tmpRight + (i + 1) + tmpBottom)) {
                        dfs(matrix, tmpLeft, tmpRight, i + 1, tmpBottom);
                    }
                    if (!memo.contains(tmpLeft + "" + tmpRight + tmpTop + (i - 1))) {
                        dfs(matrix, tmpLeft, tmpRight, tmpTop, i - 1);
                    }
                    break;
                }
            }

            // 扫描 最上面一行
            for (int i = tmpLeft; i <= tmpRight; i++) {
                if (matrix[tmpTop][i] == '0') {
                    flag = false;
                    // 缩小列
                    if (!memo.contains(tmpLeft + "" + (i + 1) + tmpTop + tmpBottom)) {
                        dfs(matrix, i + 1, tmpRight, tmpTop, tmpBottom);
                    }
                    if (!memo.contains(tmpLeft + "" + (i - 1) + tmpTop + tmpBottom)) {
                        dfs(matrix, tmpLeft, i - 1, tmpTop, tmpBottom);
                    }
                    // 缩小行
                    if (!memo.contains(tmpLeft + "" + tmpRight + (tmpTop + 1) + tmpBottom)) {
                        dfs(matrix, tmpLeft, tmpRight, tmpTop + 1, tmpBottom);
                    }
                    break;
                }
            }

            tmpLeft++;
            tmpRight--;
            tmpTop++;
            tmpBottom--;
        }

        // 一层一层的遍历都是 1
        if (flag) {
            max = Math.max(tmpMax, max);
            return;
        }
    }

}
