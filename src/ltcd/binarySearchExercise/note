联想到二分查找的前提：
    ①待查找的数组有序或者部分有序
    ②要求时间复杂度低于O(n)或者直接要求时间复杂度为O(log n)

二分查找常见题目类型：
    ①标准的二分查找
    ②二分查找边界：
        左边界
        右边界
        左边界和右边界
    ③二分查找极值点

标准的二分查找模板：数组有序，无重复数据，范围找超找目标所在数组中的位置
    public int search(int[] nums, int target) {
        if (nums.length == 0) return -1;

        int left = 0;
        int right = nums.length - 1;
        int mid = 0;

        while(left <= right) {
            mid = left + ((right - left) >> 1); //或者(left + right) >> 1

            if(nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] == target) {
                return mid;
            }

        return -1;
    }
    查找区间：[left, right]----左闭右闭
    循环条件：left <= right----终止条件：left = right + 1即搜索区间变成[right + 1, right]，区间不合法
    中间位置计算：mid = left + (right - left) >> 1----与(left + right) >> 1等价，但是前者可以防止(left + right)溢出。
               若数组的长度为奇数，则mid正好是正中间，若数组长度为偶数，则mid偏左一点。当区间[left, right]长度 <= 2时，mid
               和left总是在同一侧。
    搜索区间减半：当前搜索区间：[left, right] = [left, mid - 1] ∪ [mid, mid] ∪ [mid + 1, right]
        若nums[mid] == target,直接返回mid，否则缩小搜索空间
        若nums[mid] < target,目标数在右边区域，左边界更新：left = mid + 1----下一步搜索区间变成[mid + 1, right]
        若nums[mid] > target,目标数在左边区域，右边界更新：right = mid - 1----下一步搜索区间变成[left, mid - 1]
    返回值：mid(找到) / -1(未找到)


二分查找边界：
    查找左边界：数组有序，但是数组有重复数据，返回等于查找目标的下标中 下标最小，即最左边的坐标（左边界）
    写法一：
        public int left_bound(int[] nums, int target) {
            if (nums.length == 0) return -1;

            int left = 0;
            int right = nums.length;//与标准二分查找不同
            int mid = 0;

            while(left < right) {//与标准二分查找不同，搜索区间[left, right)
                mid = left + ((right - left) >> 1); //或者(left + right) >> 1

                if(nums[mid] > target) {
                    right = mid;//接着缩小搜索区间[left, mid)
                } else if (nums[mid] < target) {
                    left = mid + 1;
                } else if (nums[mid] == target) {
                    right = mid;//不返回，接着缩小搜索区间
                }

            return left;//返回边界,此时left = right，返回其中任何一个都行
        }
        查找区间：[left, right)----左闭右开
        循环条件：left < right----终止条件：left = right 即搜索区间变成[right, right)，区间不合法
        中间位置计算：mid = left + (right - left) >> 1----与(left + right) >> 1等价，但是前者可以防止(left + right)溢出。
                   若数组的长度为奇数，则mid正好是正中间，若数组长度为偶数，则mid偏左一点。当区间[left, right)长度 <= 2时，mid
                   和left总是在同一侧。
        搜索区间减半：当前搜索区间：[left, right) = [left, mid) ∪ [mid, mid] ∪ [mid + 1, right)
            若nums[mid] == target,搜索区间减半变成：[left, mid),否则搜索区间减半：
            若nums[mid] < target,目标数在右边区域，左边界更新：left = mid + 1----下一步搜索区间变成[mid + 1, right)
            若nums[mid] > target,目标数在左边区域，右边界更新：right = mid----下一步搜索区间变成[left, mid)
        返回值：left或者right(找到) / -1(未找到)

    写法二：
        int left_bound(int[] nums, int target) {
            int left = 0;
            int right = nums.length - 1; // 搜索区间为 [left, right]

            while (left <= right) {// 循环条件
                int mid = left + (right - left) / 2;
                if (nums[mid] < target) { // 搜索区间变为 [mid+1, right]
                    left = mid + 1;
                } else if (nums[mid] > target) { // 搜索区间变为 [left, mid-1]
                    right = mid - 1;
                } else if (nums[mid] == target) { // 收缩右侧边界
                    right = mid - 1;
                }
            }// 检查出界情况
            if (left >= nums.length || nums[left] != target) return -1;

            return left;
        }
        查找区间：[left, right]----左闭右闭
        循环条件：left < right----终止条件：left = right 即搜索区间变成[right, right)，区间不合法
        中间位置计算：mid = left + (right - left) >> 1----与(left + right) >> 1等价，但是前者可以防止(left + right)溢出。
                   若数组的长度为奇数，则mid正好是正中间，若数组长度为偶数，则mid偏左一点。当区间[left, right)长度 <= 2时，mid
                   和left总是在同一侧。
        搜索区间减半：当前搜索区间：[left, right) = [left, mid) ∪ [mid, mid] ∪ [mid + 1, right)
            若nums[mid] == target,搜索区间减半变成：[left, mid),否则搜索区间减半：
            若nums[mid] < target,目标数在右边区域，左边界更新：left = mid + 1----下一步搜索区间变成[mid + 1, right)
            若nums[mid] > target,目标数在左边区域，右边界更新：right = mid----下一步搜索区间变成[left, mid)
        返回值：left或者right(找到) / -1(未找到)


    查找左边界：数组有序，但是数组有重复数据，返回等于查找目标的下标中 下标最大，即最右边的坐标（右边界）
    写法一：
        public int right_bound(int[] nums, int target) {
            if (nums.length == 0) return -1;

            int left = 0;
            int right = nums.length;//与标准二分查找不同
            int mid = 0;

            while(left < right) {//与标准二分查找不同，搜索区间[left, right)
                mid = left + ((right - left) >> 1); //或者(left + right) >> 1

                if(nums[mid] > target) {
                    right = mid;//接着缩小搜索区间
                } else if (nums[mid] < target) {
                    left = mid + 1;
                } else if (nums[mid] == target) {
                    left = mid + 1;//不返回，接着缩小搜索区间
                }

            return right - 1;//返回边界,此时left = right
        }
        查找区间：[left, right)----左闭右开
        循环条件：left < right----终止条件：left = right 即搜索区间变成[right, right)，区间不合法
        中间位置计算：mid = left + (right - left) >> 1----与(left + right) >> 1等价，但是前者可以防止(left + right)溢出。
                   若数组的长度为奇数，则mid正好是正中间，若数组长度为偶数，则mid偏左一点。当区间[left, right)长度 <= 2时，mid
                   和left总是在同一侧。
        搜索区间减半：当前搜索区间：[left, right) = [left, mid) ∪ [mid, mid] ∪ [mid + 1, right)
            若nums[mid] == target,搜索区间减半变成：[mid + 1, right)
            若nums[mid] < target,目标数在右边区域，左边界更新：left = mid + 1----下一步搜索区间变成[mid + 1, right)
            若nums[mid] > target,目标数在左边区域，右边界更新：right = mid----下一步搜索区间变成[left, mid)
        返回值：left或者right(找到) - 1 / -1(未找到)

    写法二：
        int right_bound(int[] nums, int target) {
            int left = 0;
            int right = nums.length - 1;

            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (nums[mid] < target) {
                    left = mid + 1;
                } else if (nums[mid] > target) {
                    right = mid - 1;
                } else if (nums[mid] == target) { // 这⾥改成收缩左侧边界即可
                    left = mid + 1;
                }
            }// 这⾥改为检查 right 越界的情况
            if (right < 0 || nums[right] != target) return -1;

            return right;
        }
        查找区间：[left, right]----左闭右闭
        循环条件：left < right----终止条件：left = right 即搜索区间变成[right, right)，区间不合法
        中间位置计算：mid = left + (right - left) >> 1----与(left + right) >> 1等价，但是前者可以防止(left + right)溢出。
                   若数组的长度为奇数，则mid正好是正中间，若数组长度为偶数，则mid偏左一点。当区间[left, right)长度 <= 2时，mid
                   和left总是在同一侧。
        搜索区间减半：当前搜索区间：[left, right) = [left, mid) ∪ [mid, mid] ∪ [mid + 1, right)
            若nums[mid] == target,搜索区间减半变成：[left, mid),否则搜索区间减半：
            若nums[mid] < target,目标数在右边区域，左边界更新：left = mid + 1----下一步搜索区间变成[mid + 1, right)
            若nums[mid] > target,目标数在左边区域，右边界更新：right = mid----下一步搜索区间变成[left, mid)
        返回值：left或者right(找到) / -1(未找到)







































