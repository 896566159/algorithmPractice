求解n数之和问题模板：

//计算二元组
vector<vector<int>> twoSumTarget(vector<int>& nums, int target) {
    // nums 数组必须有序
    sort(nums.begin(), nums.end());
    int lo = 0;
    int hi = nums.size() - 1;
    vector<vector<int>> res;

    while (lo < hi) {
        int sum = nums[lo] + nums[hi];
        int left = nums[lo];
        int right = nums[hi];

        if (sum < target) {//两个指针的结果小于target, 则让左指针右移，整体会变大
            while (lo < hi && nums[lo] == left) lo++;//在左指针小于有指针的前提小，对left指针指向的数据进行去重
        } else if (sum > target) {//于上方操作相同
            while (lo < hi && nums[hi] == right) hi--;
        } else {
            res.push_back({left, right});//将两个指针添加到结果中
            while (lo < hi && nums[lo] == left) lo++;//左边去重
            while (lo < hi && nums[hi] == right) hi--;//右边去重
        }
    }

    return res;
}

/* 计算数组 nums 中所有和为 target 的三元组 */
vector<vector<int>> threeSumTarget(vector<int>& nums, int target) {
    // 数组得排个序
    sort(nums.begin(), nums.end());
    int n = nums.size();
    vector<vector<int>> res;

    // *******穷举 threeSum 的第一个数****
    for (int i = 0; i < n; i++) {
        // 对 target - nums[i] 计算 twoSum
        vector<vector<int>>
            tuples = twoSumTarget(nums, i + 1, target - nums[i]);

        // 如果存在满足条件的二元组，再加上 nums[i] 就是结果三元组
        for (vector<int>& tuple : tuples) {
            tuple.push_back(nums[i]);
            res.push_back(tuple);
        }

        // 去重
        while (i < n - 1 && nums[i] == nums[i + 1]) {
            i++;
        }
    }
    return res;
}