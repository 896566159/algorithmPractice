
「前缀和」 是从 nums 数组中的第 0 位置开始累加，到第 i 位置的累加结果，我们常把这个结果保存到数组 preSum 中，记为 preSum[i]。

在前面计算「前缀和」的代码中，计算公式为 preSum[i] = preSum[i - 1] + nums[i] ，为了防止当 i = 0 的时候数组越界，所以加了个 if (i == 0) 的判断，即 i == 0 时让 preSum[i] = nums[i]。

在其他常见的写法中，为了省去这个 if 判断，我们常常把「前缀和」数组 preSum 的长度定义为 原数组的长度 + 1。preSum 的第 0 个位置，相当于一个占位符，置为 0。
那么就可以把 preSum 的公式统一为 preSum[i] = preSum[i - 1] + nums[i - 1]，此时的preSum[i]表示nums中 i 元素左边所有元素之和（不包含当前元素 i）。
preSum[0] = 0;
preSum[1] = preSum[0] + nums[0];
preSum[2] = preSum[1] + nums[1];
...
「前缀和」有什么用
用途一：求数组前 ii 个数之和
求数组前 ii 个数之和，是「前缀和」数组的定义，所以是最基本的用法。
举例而言：

如果要求 nums 数组中的前 2 个数的和（即 sum(nums[0], nums[1])sum(nums[0],nums[1]) )，直接返回 preSum[2]preSum[2] 即可。
同理，如果要求 nums 数组中所有元素的和（即 sum(nums[0]..nums[length - 1])sum(nums[0]..nums[length−1])），直接返回 preSum[length]preSum[length] 即可。
用途二：求数组的区间和
利用 preSum 数组，可以在 O(1)O(1)的时间内快速求出 nums 任意区间 [i, j][i,j] (两端都包含) 内的所有元素之和。

公式为： sum(i, j) = preSum[j + 1] - preSum[i]sum(i,j)=preSum[j+1]−preSum[i]

什么原理呢？其实就是消除公共部分即 0~i-1 部分的和，那么就能得到 i~j 部分的区间和。

注意上面的式子中，使用的是 preSum[j + 1] 和 preSum[i]，需要理解为什么这么做。（如果理解不了的知识，那就记不住，所以一定要理解）

preSum[j + 1] 表示的是 nums 数组中 [0, j][0,j] 的所有数字之和（包含 00 和 jj）。
preSum[i]表示的是 nums数组中 [0, i - 1][0,i−1] 的所有数字之和（包含 00 和 i - 1i−1）。
当两者相减时，结果留下了 nums数组中 [i, j][i,j] 的所有数字之和。

https://leetcode.cn/circle/discuss/JK7Dn9/
https://leetcode.cn/problems/binary-subarrays-with-sum/solution/de-liao-yi-wen-ba-qian-zhui-he-miao-sha-mqngx/