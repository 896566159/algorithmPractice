0-1背包问题：物品不可以再分，只能选择放入或者不放入

给你一个可装载重量为W的背包和N个物品，每个物品有重量和价值两个属性。其中第i个物品的
重量为wt[i]，价值为val[i]，现在让你用这个背包装物品，最多能装的价值是多少？
例子输入如下：
N = 3, W = 4
wt = [2, 1, 3]
val = [4, 2, 3]

第一步明确状态：
    背包容量、可选择的物品

第二部：明确dp数组的定义
    第一步明确了两个状态量：背包容量、选择的物品‘
    dp数组需要将这两个状态量表示出来
    一个状态量就是一维数组，两个状态量就是二维数组，三位状态量就是三维数组.....

    此例子中，dp定义为：
        dp[i][w]:对于前i个物品，当前背包的容量为w，这种情况下能装的最大值
        如dp[3][5] = 6:背包容量为5，对前三个物品进行选择，能装下的最大值为6

    baseCase：
    dp[0][N] = dp[N][0] = 0, 初始化时，当背包容量为0或者可选的物品数量为0时，能装的最大值都是0

    对dp数组进行填充
    int dp[N+1][W+1]
    dp[0][..] = 0
    dp[..][0] = 0

    for i in [1..N]:
        for w in [1..W]:
            dp[i][w] = max(
                把物品 i 装进背包,
                不把物品 i 装进背包
            )

    return dp[N][W]//返回答案即是背包容量为W、可选物品为N时能装的最大值

第三步：状态转移方程
    在选择是否将第i个物品装入背包时：
    ①装入：dp[i][w] = dp[i - 1][w - w[i - 1]] + val[i - 1];//装入的情况下，当前容量下最大值 = i - 1物品选择得到的最大值， 加上第i个的值，同时容量要变化
    ②不装入: dp[i][w] = dp[i - 1][w];//不选择装入，则当前容量下能得的最大值等于在容量不变的情况下只选择i - 1物品的结果一样

    综上就是两种选择，我们都已经分析完毕，也就是写出来了状态转移方程，可以进一步细化代码：
    for i in [1..N]:
        for w in [1..W]:
            dp[i][w] = max(
                dp[i-1][w],
                dp[i-1][w - wt[i-1]] + val[i-1]
            )
    return dp[N][W]


题目套路框架：
    for 状态1 in 状态1的所有取值：
        for 状态2 in 状态2的所有取值：
            for ...
                dp[状态1][状态2][...] = 择优(选择1，选择2...)