摩尔投票法思路————解决寻找总数问题：169. 多数元素
候选人(cand_num)初始化为nums[0]，票数count初始化为1。
当遇到与cand_num相同的数，则票数count = count + 1，否则票数count = count - 1。
当票数count为0时，更换候选人，并将票数count重置为1。
遍历完数组后，cand_num即为最终答案。


投票法是遇到相同的则票数 + 1，遇到不同的则票数 - 1。
且“多数元素”的个数> ⌊ n/2 ⌋，其余元素的个数总和<= ⌊ n/2 ⌋。
因此“多数元素”的个数 - 其余元素的个数总和 的结果 肯定 >= 1。
这就相当于每个“多数元素”和其他元素 两两相互抵消，抵消到最后肯定还剩余至少1个“多数元素”。

无论数组是1 2 1 2 1，亦或是1 2 2 1 1，总能得到正确的候选人。


摩尔投票法思路————解决寻找总数问题：229. 多数元素
对于本题，我们需要统计出现次数超过 n / 3 的数。
我们可以不失一般性的将其拓展为「统计出现次数超过 n / k 的数」。
可以证明，出现次数超过 n / kn/k 的数最多只有 k - 1 个。否则必然违背「数总共只有 nn 个」或者「当前统计的是出现次数超过 n / kn/k 的数」的前提条件。
当明确了符合要求的数的数量之后，我们可以使用有限变量来代表这 k - 1 个候选数及其出现次数。

然后使用「摩尔投票」的标准做法，在遍历数组时同时 check 这 k - 1 个数，假设当前遍历到的元素为 xx：
    如果 xx 本身是候选者的话，则对其出现次数加一；
    如果 xx 本身不是候选者，检查是否有候选者的出现次数为 00：
    若有，则让 xx 代替其成为候选者，并记录出现次数为 11；
    若无，则让所有候选者的出现次数减一。
    当处理完整个数组后，这 k - 1k−1 个数可能会被填满，但不一定都是符合出现次数超过 n / kn/k 要求的。

    需要进行二次遍历，来确定候选者是否符合要求，将符合要求的数加到答案。
    上述做法正确性的关键是：若存在出现次数超过 n / kn/k 的数，最后必然会成为这 k - 1k−1 个候选者之一。
    我们可以通过「反证法」来进行证明：若出现次数超过 n / kn/k 的数 xx 最终没有成为候选者。

有两种可能会导致这个结果：
    1.数值 xx 从来没成为过候选者：
    如果 xx 从来没成为过候选者，那么在遍历 xx 的过程中，必然有 k - 1k−1 个候选者被减了超过 n / kn/k 次，假设当前 xx 出现次数为 CC，已知 C > n / kC>n/k，此时总个数为
    (k - 1) * C + C = C * k
    (k−1)∗C+C=C∗k

    再根据 C > n / kC>n/k，可知 C * k > nC∗k>n，而我们总共就只有 nn 个数，因此该情况恒不成立。

    2.数值 xx 成为过候选者，但被逐出替换了：
    同理，被逐出替换，说明发生了对 xx 出现次数减一的动作（减到 00），每次的减一操作，意味着有其余的 k - 2k−2 个候选者的出现次数也发生了减一动作，加上本身被遍历到的当前数 num[i]num[i]，共有 k - 1k−1 个数字的和 xx 被一同统计。
    因此，根据我们摩尔投票的处理过程，如果 xx 成为过候选者，并被逐出替换，那么同样能够推导出我们存在超过 nn 个数。

综上，如果存在出现次数超过 n / kn/k 的数，其必然会成为 k - 1k−1 个候选者之一。